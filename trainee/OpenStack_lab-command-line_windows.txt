# Assumes Powershell 5 or later with Windows 10 21H2 or later


$LAB_OPENSTACK_IP = "TODO"


ping $LAB_OPENSTACK_IP


cd $Env:USERPROFILE\Downloads


# The .exe uses the System32\curl.exe instead of the PowerShell alias

curl.exe --insecure --include https://${LAB_OPENSTACK_IP}:8080/healthcheck

# Add the directory to your path if needed
# actual location varies based on windows and python version
$Env:PATH = "$Env:USERPROFILE\AppData\Local\Programs\Python\Python313;$Env:PATH"
$Env:Path += [IO.Path]::PathSeparator + "$Env:USERPROFILE\AppData\Local\Programs\Python\Python313\Scripts"

pip install python-swiftclient


# Your swift.exe may not be in your PATH

Get-ChildItem -Path $Env:USERPROFILE\ -Filter swift.exe -Recurse -ErrorAction SilentlyContinue -Force




swift --insecure --auth=https://${LAB_OPENSTACK_IP}:8080/auth/v1.0 -U system:root -K testpass --verbose stat



# Burp Setup commands

$Env:https_proxy = "http://localhost:8080"


# repeat test command
swift --insecure --auth=https://${LAB_OPENSTACK_IP}:8080/auth/v1.0 -U system:root -K testpass --verbose stat


# Another test command

echo $Env:USERNAME > sample_object.txt



swift --insecure -A https://${LAB_OPENSTACK_IP}:8080/auth/v1.0 -U system:root -K testpass upload bsides-workshop sample_object.txt


swift --insecure -A https://${LAB_OPENSTACK_IP}:8080/auth/v1.0 -U system:root -K testpass list





# XSS testing

echo $Env:USERNAME > sample_object.txt


swift --insecure -A https://${LAB_OPENSTACK_IP}:8080/auth/v1.0 -U system:root -K testpass upload fileuploads .\sample_object.txt

# now try to pawn